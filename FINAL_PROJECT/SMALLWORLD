; Vladyslav Tarasenko C00301201
; Date of final commit: 09/03/2025
; Brief: text-based game skeleton, there is working command parser with some available commands,
; there is a skeleton of dynamic updating of the map - usage of LOCATIONAL_ITEMS array, to dynamicly 
; update available interactive items for the player at the moment, there is a control of the speed of the game
; (output speed) of the program using DELAY. The beginning of the game is also ready finishing on a menu that
; in the future will allow the player to pick and start a story. To get there the player needs to talk to John get
; recieve the newspaper and read it. At this point the game finishes when user enters quit command
; There is a safe point where the player returns in case he enters invalid command, which creates an endless loop.
; If user enters valid command then particular event happen for example, if you talk to John you will get a short dialogue
; displayed on the screen, and also the newspaper will become available to read. After the player returns to the safe point
; where he can enter another command

        ORG $1000


CR          EQU $0D 
LF          EQU $0A

INPUT_BUFFER_SIZE   EQU 81  ; for D0 = 2 trap 15 (80 max chars) + 1 for null terminator        
EXIT        EQU 0           ; USED TO EXIT ASSEMBLY PROGRAM
ATTEMPTS_PER_LEVEL  EQU 5   ; number of impossible or non progressing actions by the player

        * START OF GAME
START:
        BSR     GAME            ; BRANCH TO THE GAME SUBROUTINE

        * GAME LOOP
        ORG     $3000           ; THE REST OF THE PROGRAM IS TO BE LOCATED FROM 3000 ONWARDS

        * ------------------- GAME SUBROUTINE ---------------------
GAME:
        BSR     CHAPTER_1
        BSR     END

END:
        SIMHALT
        
   

CHAPTER_1:
        BSR     ENDL
        
        LEA     LOCATIONAL_ITEMS, A1    ; temporary initialization solution
        MOVE.L  #0, (A1)
        MOVE.L  #0, 4(A1)
        MOVE.L  #0, 8(A1)
        
        LEA     CHAPTER_1_INTRO_P1, A1
        MOVE.B  #1, D0                      ; trap 15 n number of characters specified in d1 without CR LF
        BSR     PRINT
        
            
        LEA     READ_NEXT, A1
        MOVE.B  #18, D0
        TRAP    #15
        
CHAPTER_1_SAFE_POINT_1:   
        BSR     CLEAR_SCREEN
        LEA     CHAPTER_1_INTRO_P2, A1
        MOVE.B  #1, D0
        BSR     PRINT
CHAPTER_1_SAFE_POINT_2:        
        BSR     PLAYER_INPUT_HANDLER
        
        BSR     CLEAR_D_REGISTERS
        MOVE.L  A1, A5                      ; save copy of input
        LEA     PLAYER_ACTIONS, A6          ; loading the address of array with available commands to use in comparison loop with input
        BSR     CHECK_COMMANDS
        

                      


PRINT: 
        MOVE.B  #1, D1         
        MOVE.L  #5000, D6       ; 10 for faster debugging otherwise 20000 
        BSR     DELAY
        TRAP    #15           ; Call Easy68K system trap for output
        ADDQ    #1, A1
        MOVE.B  (A1), D6
        BNE     PRINT
        BSR     ENDL
        RTS


DONE    TRAP    #15           ; Exit program



DELAY:
        SUBQ.L  #1, D6
        BNE     DELAY
        RTS 
        

             
ENDL:
        MOVEM.L D0/A1,-(A7)     ; SAVE D0 AND A1
        MOVE    #14,D0          ; MOVE LITERAL 14 TO DO
        LEA     CRLF,A1         ; ASSIGN CRLF TO ADDRESS REGISTER A1
        TRAP    #15             ; TRAP AND INTERPRET VALUE IN D0
        MOVEM.L (A7)+,D0/A1     ; RESTORE D0 AND A1
        RTS                     ; RETURN FROM ENDL: SUBROUTINE


STRCMP:   
        MOVE.B  (A0)+, D2       ; Load byte from expected string
        MOVE.B  (A1)+, D3       ; Load byte from input command
        CMP.L   #0, D2          ; Check if end of string
        BEQ     RETURN_LABEL
        CMP.B   D2, D3          ; Compare characters
        BEQ     STRCMP     
        RTS                     ; Strings are equal


RETURN_LABEL:
        RTS
        


INITIALIZE_PEOPLE:
        CMP.L    #0, (A6)
        BEQ      RETURN_LABEL     
        MOVE.L   (A6)+, (A5)+
        ADDQ     #4, D6
        BRA      INITIALIZE_PEOPLE                       


INITIALIZE_ITEMS:
        CMP.L    #0, (A6)
        BEQ      RETURN_LABEL
        MOVE.L   (A6)+, (A5)+
        ADDQ     #4, D6
        BRA      INITIALIZE_ITEMS
       
        
INITIALIZE_ITEM:
        LEA      LOCATIONAL_ITEMS, A0
        MOVE.L   #0, 4(A0)   ; Store second longword (offset 4 bytes)
        MOVE.L   #0, 8(A0)   ; Store third longword (offset 8 bytes)
        MOVE.L   (A1), D6
        MOVE.L   D6, (A0)
        RTS
        
       
INVALID_INPUT:
        BSR      CLEAR_SCREEN
        LEA      INVALID_INP, A1
        MOVE.B   #14, D0
        TRAP     #15       
        MOVE.L   #500000, D6   
        BSR      DELAY

        BSR      CLEAR_A_REGISTERS
        BSR      CLEAR_D_REGISTERS
        
        BRA      CHAPTER_1_SAFE_POINT_2


CHECK_COMMANDS:
        MOVE.L  A5, A1
        CMP.L   #0, (A6)
        BEQ     INVALID_INPUT     ; If null, invalid command
        MOVE.L  (A6)+, A0         ; Load command pointer
        ADDQ    #1, D6
        BSR     STRCMP            ; Compare user input with command
VALID:  BEQ     EXECUTE_COMMAND   ; If match, execute command
        BRA     CHECK_COMMANDS
       

EXECUTE_COMMAND:
        CMP.L    #1, D6
        BEQ      GO
        
        CMP.L    #2, D6
        BEQ      TALK
        
        CMP.L    #3, D6
        BEQ      READ
        
        CMP.L    #4, D6
        BEQ      QUIT


GO:
       BRA       INVALID_INPUT
       ; in development

TALK:  
       LEA       INTERACTIVE_PEOPLE, A6
       BSR       CLEAR_D_REGISTERS
TALK_LOOP:
       MOVE.L    A5, A1
       CMP.L     #0,(A6)
       BEQ       INVALID_INPUT
       ADDQ      #1, D6            ; keep track on number of the interactive person
       ADDQ.L    #8, A1           ; skipping the "talk to" command itself      
       MOVE.L    (A6)+, A0
       BSR       STRCMP       
       BEQ       DIALOGUE_MANAGER
       BRA       TALK_LOOP
       
       
INSPECT:
        ; in development


READ:
       LEA       LOCATIONAL_ITEMS, A1
       MOVE.L    A1, A6
       BSR       CLEAR_D_REGISTERS
READ_LOOP:
       MOVE.L    A5, A1
       CMP.L     #0,(A6)
       BEQ       INVALID_INPUT
       ADDQ      #1, D6            ; keep track on number of the interactive item
       ADDQ.L    #5, A1           ; skipping the "read" command itself      
       MOVE.L    A6, A0
       ADDQ.L    #1, A6
       BSR       STRCMP       
       BEQ       READING_MANAGER
       BRA       READ_LOOP

QUIT:
        LEA     GAME_FINISHED, A1
        BSR     CLEAR_SCREEN
        BSR     CLEAR_D_REGISTERS
        MOVE.B  #14, D0
        TRAP    #15
        BRA     END    


DIALOGUE_MANAGER:
            
        CMP.L    #1, D6   ; John 
        BEQ      LOAD_JOHN     
        
        CMP.L    #2, D6   ; Mrs Hudson
        BEQ      LOAD_HUDSON
        
        CMP.L    #3, D6   ; Lestrade
        BEQ      LOAD_LESTRADE 
        
        BRA      INVALID_INPUT


READING_MANAGER:
        CMP.L   #1, D6
        BEQ     READ_NEWSPAPER


READ_NEWSPAPER:
        LEA     NEWSPAPER_MSG, A1
        MOVE.B  #1, D0
        BSR     PRINT
        BRA     CHAPTER_1_SAFE_POINT_2
        
        
LOAD_JOHN:
        LEA      CH1_DIALOGUE_JOHN, A1
        MOVE.B   #1, D0
        BSR      PRINT
        LEA      ITEM_NEWSPAPER, A1
        BSR      INITIALIZE_ITEM
        BRA      CHAPTER_1_SAFE_POINT_2   

LOAD_HUDSON:
        LEA      CH1_DIALOGUE_HUDSON, A1
        MOVE.B   #1, D0
        BSR      PRINT
        BRA      CHAPTER_1_SAFE_POINT_2
   
LOAD_LESTRADE:
        BRA      INVALID_INPUT


PLAYER_INPUT_HANDLER:
        LEA     PLAYER_ACTION_PROMPT, A1
        MOVE.B  #14, D0
        TRAP    #15
        LEA     PLAYER_INPUT_BUFFER, A1
        MOVE.B  #2, D0                      ; this system call takes user input into A1 and writes the length to D1 (max 80)
        TRAP    #15
        


CLEAR_D_REGISTERS:
        MOVE.L  #0, D6
        MOVE.L  #0, D5
        MOVE.L  #0, D4
        MOVE.L  #0, D3
        MOVE.L  #0, D2
        MOVE.L  #0, D1
        MOVE.L  #0, D0
        RTS  

CLEAR_A_REGISTERS:
        MOVE.L  #0, A6
        MOVE.L  #0, A5
        MOVE.L  #0, A4
        MOVE.L  #0, A3
        MOVE.L  #0, A2
        MOVE.L  #0, A1
        MOVE.L  #0, A0

CLEAR_SCREEN: 
        MOVE.B  #11, D0         ; CLEAR SCREEN
        MOVE.W  #$FF00, D1      ; SET COLOUR
        TRAP    #15             ; TRAP AND INTERPRET VALUE IN D0
        MOVE.W  #0, D1          ; restore 0 value of D1 for safety
        RTS                     ; RETURN FROM CLEAR_SCREEN: SUBROUTINE   
        
            
        * ------------------- DATA DECLARATIONS --------------------
CRLF:           DC.B    $0D,$0A,0
NEWSPAPER_MSG:  DC.B    '************************************************************',CR,LF
                DC.B    'THE LONDON TIMES - February 25, 2007',CR,LF
UPDATE_MSG:     DC.B    'UPDATING QUEST STATUS...',CR,LF
BORDER_V1:      DC.B    '----------------------------------------------------',CR,LF
OPTION1:        DC.B    '[1] Police report new series of suicedes, all victims are found to be poiso...',CR,LF
OPTION2:        DC.B    '[2] Exit',CR,LF,0


INVALID_INP:    DC.B    'You can not perform this action at the moment, try something else...',CR,LF,0
DEBUGGING_MESSAGE:
                DC.B    'Hooooray I got here it works!',0
GAME_FINISHED:
                DC.B    'Thank you for playing new chapters are coming',0
CHAPTER_1_INTRO_P1: 
                DC.B '| Footsteps were heard from the landing. The distinct syncopation ',CR,LF
                DC.B '| and distinctive ringing of one of the strokes in relation to the',CR,LF
                DC.B '| next betrayed the limp and the presence of a wooden cane. ',CR,LF
                DC.B '| The step was weighty, confident and proud. Despite the limp, the walker ',CR,LF 
                DC.B '| kept his step evenly, without faltering or slowing down.',CR,LF
                DC.B '| The clock struck a quarter past seven. ',CR,LF
                DC.B '| The once spacious, now haphazardly furnished and strewn with all',CR,LF
                DC.B '| sorts of notes and objects ',CR,LF
                DC.B '| (having no other purpose than to exist in this cozy chaos) living',CR,LF
                DC.B '| room was filled with warm light coming',CR,LF
                DC.B '| from the crackling fireplace and giving a special',CR,LF
                DC.B '| vintage shade to the dusty bookshelves... ',CR,LF,0
CHAPTER_1_INTRO_P2:
                DC.B '| Rocking in my chair and puffing on tobacco from an oak pipe,',CR,LF
                DC.B '| the aroma of which merged into a dual duet with the delicate',CR,LF
                DC.B '| smell of almost charred walnut firewood,',CR,LF
                DC.B '| I wandered in the chambers of my mind,',CR,LF
                DC.B '| again and again passing by the same nooks and corners, ',CR,LF
                DC.B '| trying to spot any previously unnoticed detail.',CR,LF
                DC.B '| "What a bore," I cried out, disappointed and unexpectedly loud. ',CR,LF
                DC.B '| In the kitchen, a spoon hit a glass.',CR,LF
                DC.B '| Mrs Hudson must have been here all this time. At that very moment, ',CR,LF
                DC.B '| the door opened slightly and John entered the room...',CR,LF,0
                
CH1_DIALOGUE_JOHN:
                DC.B 'You: Anything interesting in the newspapers this morning?',CR,LF
                DC.B 'John: Good morning to you, slept well tonight?',CR,LF
                DC.B 'John passes the newspaper',0
                
CH1_DIALOGUE_HUDSON:
                DC.B 'Mrs Hudson: I am not your housekeeper!',CR,LF,0
   
                
ACTION_TALKTJ:  DC.B 'talk to John',0
ACTION_TALKH:   DC.B 'talk to Mrs Hudson',0
ACTION_TALKL:   DC.B 'talk to Lestrade',0
ACTION_TAKE:    DC.B 'take',0
READ_NEXT:      
                DC.B '|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|',CR,LF
                DC.B '|/\/\ PRESS ENTER TO CONTINUE \/\/|',CR,LF
                DC.B '|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|',CR,LF,0
                
PLAYER_ACTION_PROMPT:  
                DC.B '***********************************',CR,LF
                DC.B 'WHAT SHOULD I DO -> ',0
BORDER:
                DC.B '***********************************',CR,LF,0

TIMER:
                DC.B '54321',0


       ORG      $4000

INTERACTIVE_PEOPLE:
    DC.L JOHN       ; Pointer to first string
    DC.L HUDSON     ; Pointer to second string
    DC.L LESTRADE   ; Pointer to third string
    DC.L 0          ; Null terminator (optional)

JOHN:
    DC.B 'John',0
HUDSON:
    DC.B 'Mrs Hudson',0
LESTRADE:
    DC.B 'Lestrade',0
    

    DS.B 1    ; to ensure even addressing
    
PLAYER_ACTIONS:
    DC.L CMD_GO
    DC.L CMD_TALK
    DC.L CMD_READ
    DC.L CMD_QUIT
    DC.L 0

CMD_GO:      DC.B 'go',0          ; command 1
CMD_TALK:    DC.B 'talk to',0     ; command 2
CMD_READ:    DC.B 'read',0
CMD_QUIT:    DC.B 'quit',0




    DS.B 1    
ITEM_NEWSPAPER: DC.B 'the newspaper',0

EVEN:    DS.B 4    ; to ensure even addressing


LOCATIONAL_ITEMS:       ; currently available items to interact at the location
     DS.L 3
     DC.L 0
    ;DC.L ITEM_ONE
   ; DC.L ITEM_TWO
  ;  DC.L ITEM_THREE
 ;   DC.L 0

;ITEM_ONE: DC.B 'NONE'
;ITEM_TWO: DC.B 'NONE'
;ITEM_THREE: DC.B 'NONE'
        
        
LOCATIONAL_PEOPLE:      ; currently available people to interact at the location
    DS.L 3
        
        
INVENTORY:
    DS.L 10
    


PLAYER_INPUT_BUFFER: DS.B INPUT_BUFFER_SIZE
        END START





